"use strict";(self.webpackChunkastro_docs=self.webpackChunkastro_docs||[]).push([[199],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(h,o(o({ref:t},p),{},{components:a})):n.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2591:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2},o="App Cycle",s={unversionedId:"Intro/app-cycle",id:"Intro/app-cycle",title:"App Cycle",description:"In this section we will discuss the app Home screen initialization cycle. The details screen will also follow the about same cycle.",source:"@site/docs/Intro/app-cycle.md",sourceDirName:"Intro",slug:"/Intro/app-cycle",permalink:"/Intro/app-cycle",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Intro/app-cycle.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Folder Structure",permalink:"/Intro/folder-structure"},next:{title:"Data Related Part",permalink:"/category/data-related-part"}},l={},c=[],p={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"app-cycle"},"App Cycle"),(0,r.kt)("p",null,"In this section we will discuss the app Home screen initialization cycle. The details screen will also follow the about same cycle."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"AstroApp.kt:")," The app starts from the ",(0,r.kt)("inlineCode",{parentName:"li"},"AstroApp.kt")," class . From here the ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautApi.kt")," interface is created and a room database instance is created by using ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautDatabase.kt"),'. "astronaut_database" is the name of the database that will be created.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MainActivity.kt:")," class represents the main entry point of the application. This class sets up the layout and ",(0,r.kt)("inlineCode",{parentName:"li"},"Mainview.kt")," function is invoked"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MainView.kt:")," this composable defines the UI structure and behavior of the main screen. It defines the navigation routes using the ",(0,r.kt)("inlineCode",{parentName:"li"},"Navigation.kt")," object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"AstronautListScreen.kt:")," is the first screen / home screen of the app. This function represents the screen displaying a list of astronauts. It takes a NavController and a viewModel of type ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautListViewModel")," as parameters. This screen observe the property ",(0,r.kt)("inlineCode",{parentName:"li"},"_astronautListState")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautViewModel.kt"),"to get the updated list of astronauts whenever it changes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"AstronautViewModel.kt:")," class is a ViewModel class that manages the data and business logic for the astronaut list screen. From here we retrieve a list of astronauts from ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautRepository.kt")," class. It exposes property ",(0,r.kt)("inlineCode",{parentName:"li"},"_astronautListState")," which represents the current state of the astronaut list. It is type of ",(0,r.kt)("inlineCode",{parentName:"li"},"List<Astronaut.kt>"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"AstronautRepository.kt:")," class acts as an intermediary between the data sources (API service and local database) and the ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautListViewModel")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"AstroDetailViewModel"),". It first checks if there are any astronauts available in the local database by instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautDao.kt")," interface which is initialized with ",(0,r.kt)("inlineCode",{parentName:"li"},"AstroApp.database.astronautDao()"),". If the local database is empty, it makes an API request using the instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautApi.kt")," interface which is initialized with the ",(0,r.kt)("inlineCode",{parentName:"li"},"AstroApp.apiService"),". The response from the API is then mapped to a list of ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautEntity.kt")," objects using the ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautMapper.kt")," class. And then AstronautEntity object mapped to ",(0,r.kt)("inlineCode",{parentName:"li"},"Astronaut.kt")," domain object.")))}d.isMDXComponent=!0}}]);