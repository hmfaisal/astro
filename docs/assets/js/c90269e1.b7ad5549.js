"use strict";(self.webpackChunkastro_docs=self.webpackChunkastro_docs||[]).push([[406],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return a?n.createElement(f,o(o({ref:t},p),{},{components:a})):n.createElement(f,o({ref:t},p))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},652:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:4},o="ViewModel",l={unversionedId:"ui-related/viewmodels",id:"ui-related/viewmodels",title:"ViewModel",description:"AstronautListViewModel",source:"@site/docs/ui-related/viewmodels.md",sourceDirName:"ui-related",slug:"/ui-related/viewmodels",permalink:"/astro/ui-related/viewmodels",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ui-related/viewmodels.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"UI Screens",permalink:"/astro/ui-related/screens"}},s={},u=[{value:"AstronautListViewModel",id:"astronautlistviewmodel",level:2},{value:"AstronautDetailViewModel",id:"astronautdetailviewmodel",level:2}],p={toc:u},d="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"viewmodel"},"ViewModel"),(0,r.kt)("h2",{id:"astronautlistviewmodel"},"AstronautListViewModel"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"It is responsible for handling the business logic and data operations related to the AstronautListScreen."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautListViewModel")," interact with other classes like ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautRepository")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautDto")," to fetch data."),(0,r.kt)("li",{parentName:"ul"},"The ViewModel has a constructor that takes an optional parameter repository of type ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautRepository"),". If no repository is provided, it creates a new instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautRepository"),"."),(0,r.kt)("li",{parentName:"ul"},"There are several private mutable state variables declared using mutableStateOf")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'private val _astronautListState = mutableStateOf(listOf<Astronaut>())\nprivate val _isLoading = mutableStateOf(false)\nprivate val _error = mutableStateOf("")\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Public read-only properties are defined for each of the mutable state variables")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"val astronautListState: List<Astronaut>\n    get() = _astronautListState.value\nval isLoading: Boolean\n    get() = _isLoading.value\nval error: String\n    get() = _error.value\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"init")," block is executed immediately when an instance of ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautListViewModel")," is created. In this block, the ",(0,r.kt)("inlineCode",{parentName:"li"},"getAstronautList()")," function is called to fetch the initial list of astronauts."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"getAstronautList()")," function is a public function that fetches the list of astronauts from the repository. It is a suspending function, so it is called inside a ",(0,r.kt)("inlineCode",{parentName:"li"},"viewModelScope.launch")," block."),(0,r.kt)("li",{parentName:"ul"},"If the retrieved list of astronauts is not empty, it appends the new astronauts to the existing ",(0,r.kt)("inlineCode",{parentName:"li"},"_astronautListState"),". If empty, it means it's the last page, so it sets ",(0,r.kt)("inlineCode",{parentName:"li"},"isLastPage")," to true.")),(0,r.kt)("h2",{id:"astronautdetailviewmodel"},"AstronautDetailViewModel"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This function provides a convenient way for the UI layer (such as the ",(0,r.kt)("inlineCode",{parentName:"li"},"AstronautDetailScreen"),") to observe the state changes of the astronaut details and loading status, allowing for reactive updates in the UI based on the changes in the view model's state."),(0,r.kt)("li",{parentName:"ul"},"It uses mutableStateOf to create two mutable state properties: ",(0,r.kt)("inlineCode",{parentName:"li"},"_astronautDetailsState")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"_isLoading"),". ",(0,r.kt)("inlineCode",{parentName:"li"},"_astronautDetailsState")," represents the current state of the astronaut details and is initially set to null."),(0,r.kt)("li",{parentName:"ul"},"It exposes two immutable properties: ",(0,r.kt)("inlineCode",{parentName:"li"},"astronautDetailState")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"isLoading"),", which are derived from the mutable state properties.\n",(0,r.kt)("inlineCode",{parentName:"li"},"astronautDetailState")," returns a State object wrapping the ",(0,r.kt)("inlineCode",{parentName:"li"},"_astronautDetailsState")," property, allowing observers to listen to changes in the state."),(0,r.kt)("li",{parentName:"ul"},"It defines a function ",(0,r.kt)("inlineCode",{parentName:"li"},"getAstronautDetails")," that takes an ",(0,r.kt)("inlineCode",{parentName:"li"},"astronautId")," as a parameter and is responsible for fetching the details of the astronaut from the repository.")))}c.isMDXComponent=!0}}]);